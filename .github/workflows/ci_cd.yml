name: NBA ELT Ingestion CI / CD Pipeline

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "0.6.12"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IAM_ROLE: ${{ secrets.IAM_ROLE_ECR }}
  AWS_REGION: "us-east-1"
  ECR_REPO: ${{ secrets.ECR_REPO }}

permissions:
  id-token: write
  contents: read # This is required for actions/checkout

jobs:
  ci_pipeline:
    runs-on: ubuntu-latest
    name: Test Pipeline
    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: |
          uv run python -m nltk.downloader vader_lexicon

      - name: Create and populate .coveralls.yml file
        env:
          repo_token: ${{ secrets.repo_token }}
        run: |
          touch .coveralls.yml
          echo repo_token: "$repo_token" >> .coveralls.yml
          mkdir logs
          cat > logs/example.log
        shell: bash

      - name: Run Tests
        run: |
          make ci-test

      - name: Coveralls
        run: |
          uv run coveralls

  cd_pipeline:
    runs-on: ubuntu-latest
    needs: ci_pipeline
    name: Deploy Pipeline
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && success()
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE }} # use full arn
          role-session-name: nba-elt-ingestion-cd
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO }}
          IMAGE_TAG: nba_elt_pipeline_ingestion
        run: |
          docker compose -f docker/docker-compose.yml build
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-alert-success:
    needs: cd_pipeline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Ingestion Script Deployed to Production"
          SLACK_TITLE: Ingestion Script Deploy Pipeline
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-alert-failure:
    needs: cd_pipeline
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Ingestion Script Failed to deploy properly"
          SLACK_TITLE: Ingestion Script Deploy Failure
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
