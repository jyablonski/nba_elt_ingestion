name: NBA ELT Ingestion CI / CD Pipeline

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "0.6.12"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IAM_ROLE: ${{ secrets.IAM_ROLE_ECR }}
  AWS_REGION: "us-east-1"
  ECR_REPO: ${{ secrets.ECR_REPO }}

permissions:
  id-token: write
  contents: read # This is required for actions/checkout

jobs:
  ci_pipeline:
    runs-on: ubuntu-latest
    name: Test Pipeline
    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: uv run python -m nltk.downloader vader_lexicon

      - name: Create and populate .coveralls.yml file
        env:
          repo_token: ${{ secrets.repo_token }}
        run: |
          touch .coveralls.yml
          echo repo_token: "$repo_token" >> .coveralls.yml
          mkdir logs
          cat > logs/example.log
        shell: bash

      - name: Run Tests
        run: make ci-test

      - name: Coveralls
        run: uv run coveralls

  cd_pipeline:
    runs-on: ubuntu-latest
    needs: ci_pipeline
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Build and Push Docker Image to ECR
        uses: jyablonski/actions/deploy@v1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          ecr-repo: ${{ env.ECR_REPO }}
          image-name: nba_elt_pipeline_ingestion
          dockerfile: docker/Dockerfile
          context: .

  deploy-alert:
    needs: cd_pipeline
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Slack Deploy Notification
        uses: jyablonski/actions/slack_alert@v1
        with:
          message: ${{ job.status == 'success' && 'Ingestion Script Deployed to Production' || 'Ingestion Script Failed to deploy properly' }}
          title: ${{ job.status == 'success' && 'Ingestion Script Deploy Pipeline' || 'Ingestion Script Deploy Failure' }}
          color: ${{ job.status == 'success' && 'good' || 'danger' }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
